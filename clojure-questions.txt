clojure questions:
1. difference between let & def
	(apart of the one which:
		+ allows let "create" a new scope, where the same bind-name can be used)
		+ deconstruct the bind-name, using head-tail args
		+ aha, so many bind-names can be placed for binding name -> expression, separated by newline
		+ avoid collisions because of the single-schema-resolution within a namespace of locals + funcs)

2. keys in a map, are functions??
	(def myMap {:foo "this is foo" :bar "this bar"})
	(println (:foo myMap))
YES, keys are functions, that lookup over them passing the hash as an argument
Keep in mind that keys identified by :keywords are UNIQUE, and are self-evaluated! evaluate to selfs.

3. any "def" declared local variable that references a anonymous-function "fn[]" (think outside the main)
when is the call to fn[] executed? at compile time + runtime? or only at compile time?
it is said that "def" referenced func is executed only once, when binding the local var object to the 
anon-function(at least this is the clojure-doc saying). Is this function also executed at runtime?
Example:
(def get-current-date (fn[] 
                        (Thread/sleep 2000)
                        (java.util.Date.)))
(def curr-time-1 (get-current-date))
(println (str curr-time-1))
(def curr-time-2 (get-current-date))
(println (str curr-time-2))
;; --> from this example -> there is a compilation invocation and also a runtime invocation
;; --> if clojure evaluates the expressions at compile time, by executing the actual code ->
;; --> there might be important penalties for code that requires an expensive resource...
questions:
1. why the throwing of exceptions is NOT unified? across the APIs: pop throws exception while rest not
2. why the so diff behavior of cons & conj for vectors for example?
3. why cons returns a sequence back? along with: next + rest
4. next on a one-item list returns nil, whereas rest and pop both return an empty list.
5. contains? throws an exception when invoked on a persistentList, while on vector looksup over indices/keys
6. (cons 1 nil) -> (1); [cons] treats nil in this context as an empty seq
7. (pop '(1 2 3 4)); (2 3 4)??? wtf": pop poppes an element from the start of the list
8. there's no way of popping from the top of the list! right? all the ops on lists operated from the
  start of the list

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
